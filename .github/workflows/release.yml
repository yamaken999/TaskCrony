name: Auto Release

on:
  push:
    branches: [ master ]
    paths:
      - '**.cs'
      - '**.csproj'
      - 'README.md'
      - 'LICENSE.txt'
      - '.github/workflows/**'

permissions:
  contents: write
  
jobs:
  release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore TaskCrony.csproj
      
    - name: Build
      run: dotnet build TaskCrony.csproj --configuration Release --no-restore --verbosity minimal
      
    - name: Publish
      run: dotnet publish TaskCrony.csproj --configuration Release --output ./publish --self-contained true --runtime win-x64 --verbosity minimal
      
    - name: Simple code signing with timeout protection
      run: |
        echo "🔐 EXE ファイル署名を開始..."
        $exePath = "./publish/TaskCrony.exe"
        
        try {
          # 署名処理にタイムアウト設定（5分）
          $job = Start-Job -ScriptBlock {
            param($filePath)
            
            # シンプルな自己署名証明書を作成
            $cert = New-SelfSignedCertificate -DnsName "TaskCrony Publisher" -Type CodeSigning -CertStoreLocation "Cert:\CurrentUser\My" -NotAfter (Get-Date).AddYears(1)
            
            # EXEファイルに署名（タイムスタンプなし - 高速化）
            $result = Set-AuthenticodeSignature -FilePath $filePath -Certificate $cert
            
            return @{
              Status = $result.Status
              Certificate = $cert.Subject
              Thumbprint = $cert.Thumbprint
            }
          } -ArgumentList $exePath
          
          # 5分でタイムアウト
          if (Wait-Job $job -Timeout 300) {
            $result = Receive-Job $job
            echo "✅ 署名完了: $($result.Status)"
            echo "📋 証明書: $($result.Certificate)"
            echo "🔑 拇印: $($result.Thumbprint)"
            
            # 署名確認
            $signature = Get-AuthenticodeSignature -FilePath $exePath
            echo "🔍 検証ステータス: $($signature.Status)"
          } else {
            Stop-Job $job
            echo "⚠️ 署名処理がタイムアウトしました（5分制限）"
            echo "📦 署名なしでリリースを続行します"
          }
          
          Remove-Job $job -Force
          
        } catch {
          echo "⚠️ 署名処理でエラーが発生: $($_.Exception.Message)"
          echo "📦 署名なしでリリースを続行します"
        }
        
        # ファイル存在確認
        if (Test-Path $exePath) {
          $fileSize = (Get-Item $exePath).Length / 1MB
          echo "📁 EXE ファイルサイズ: $([math]::Round($fileSize, 2)) MB"
        } else {
          echo "❌ EXE ファイルが見つかりません: $exePath"
          exit 1
        }
      shell: pwsh
      
    - name: Get version from csproj
      id: get_version
      run: |
        $csproj = Get-Content TaskCrony.csproj
        $version = ($csproj | Select-String -Pattern '<Version>(.*)</Version>').Matches[0].Groups[1].Value
        if ([string]::IsNullOrEmpty($version)) {
          $version = ($csproj | Select-String -Pattern '<AssemblyVersion>(.*)</AssemblyVersion>').Matches[0].Groups[1].Value
        }
        if ([string]::IsNullOrEmpty($version)) {
          $version = "0.13.0"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "検出されたバージョン: $version"
      shell: pwsh
      
    - name: Create ZIP package
      run: |
        cd publish
        Compress-Archive -Path * -DestinationPath ../TaskCrony_v${{ steps.get_version.outputs.VERSION }}_Release.zip
        cd ..
        echo "パッケージ作成完了: TaskCrony_v${{ steps.get_version.outputs.VERSION }}_Release.zip"
      shell: pwsh
      
    - name: Generate release notes
      id: release_notes
      run: |
        $releaseNotes = @"
        ## TaskCrony v${{ steps.get_version.outputs.VERSION }}
        
        ### 🔐 セキュリティ強化（改善版）
        - **コード署名対応**: タイムアウト保護付き自己署名証明書による EXE ファイル署名
        - Windows Defender SmartScreen警告の軽減（処理時間最適化済み）
        - 実行ファイルの信頼性向上
        
        ###  新機能改善
        - ログ機能とバージョンチェック機能追加  
        - 包括的なログ記録システム（7日間保持）
        - GitHub API統合による自動バージョンチェック
        - リアルタイムログビューアー
        - Windows タスクスケジューラー統合
        - 日付ベースのファイルフォルダ自動作成
        - BATファイル自動生成とエンコーディング最適化
        - 複数ファイル対応とリアルタイムプレビュー
        
        ###  配布ファイル
        - **TaskCrony_v${{ steps.get_version.outputs.VERSION }}_Release.zip**: 自己署名済み実行可能ファイル (約146MB)
        - 全ファイルをルートに配置で確実起動
        - 高速署名処理によりビルド時間を短縮
        
        ###  技術仕様
        - 対象: Windows 10/11 (.NET 8.0)
        - PowerShell連携による日付計算
        - UTF-8エンコーディング（BOM問題対応済み）
        - JSON設定ファイル管理
        - 自己署名証明書によるコード署名
        
        ###  使用方法
        1. ZIPファイルをダウンロード展開
        2. TaskCrony.exeを実行（署名済みでより安全）
        3. タスク設定を入力して作成
        4. Windows タスクスケジューラーで自動実行
        
        ### 📋 署名情報
        - 署名者: TaskCrony Publisher
        - 証明書タイプ: 自己署名証明書（高速処理版）
        - タイムアウト保護: 5分制限付き
        
        ビルド日時: $(Get-Date -Format "yyyy年MM月dd日 HH:mm") JST
        "@
        
        $releaseNotes = $releaseNotes -replace "`r`n", "`n"
        echo "RELEASE_NOTES<<EOF" >> $env:GITHUB_OUTPUT
        echo $releaseNotes >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT
      shell: pwsh
      
    - name: Check existing release
      id: check_release
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        echo "バージョン v$version の既存リリースをチェック中..."
        
        # 既存のリリースを削除
        $releaseExists = gh release view "v$version" 2>$null
        if ($LASTEXITCODE -eq 0) {
          echo "既存のリリース v$version を削除中..."
          gh release delete "v$version" --yes --cleanup-tag
          echo "既存のリリースを削除しました"
        } else {
          echo "既存のリリースは見つかりませんでした"
        }
        
        # 既存のタグを削除（ローカル）
        $tagExists = git tag -l "v$version"
        if ($tagExists) {
          echo "既存のローカルタグ v$version を削除中..."
          git tag -d "v$version"
          echo "ローカルタグを削除しました"
        }
        
        # 既存のタグを削除（リモート）
        git ls-remote --tags origin | Select-String "v$version"
        if ($LASTEXITCODE -eq 0) {
          echo "既存のリモートタグ v$version を削除中..."
          git push origin ":refs/tags/v$version"
          echo "リモートタグを削除しました"
        }
        
        echo "CREATE_RELEASE=true" >> $env:GITHUB_OUTPUT
        echo "リリース作成準備完了"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh

    - name: Create Release
      if: steps.check_release.outputs.CREATE_RELEASE == 'true'
      run: |
        gh release create "v${{ steps.get_version.outputs.VERSION }}" `
          --title "TaskCrony v${{ steps.get_version.outputs.VERSION }}" `
          --notes '${{ steps.release_notes.outputs.RELEASE_NOTES }}' `
          "./TaskCrony_v${{ steps.get_version.outputs.VERSION }}_Release.zip#TaskCrony_v${{ steps.get_version.outputs.VERSION }}_Release.zip"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh