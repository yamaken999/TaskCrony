name: Auto Release

on:
  push:
    branches: [ master ]
    paths:
      - '**.cs'
      - '**.csproj'
      - 'README.md'
           # パッケージ内容の確認
        $rootFiles = Get-ChildItem $releaseDir -File | Measure-Object | Select-Object -ExpandProperty Count
        
        echo "📦 確実起動版パッケージ作成完了:"
        echo "   TaskCrony_v${{ steps.get_version.outputs.VERSION }}_Release.zip"
        echo ""
        echo "✅ フォルダ構成 (DLL整理なし):"
        echo "   📱 全ファイル: $rootFiles 個 (ローカルビルドと同じ構成)"
        echo "   📁 docs/ (ドキュメント)"
        echo "   📁 使用方法.txt (詳細説明)"
        echo ""
        echo "🔧 技術詳細:"
        echo "   - .NET 8.0 自己完結型配布"
        echo "   - 全ファイルルート配置で確実起動"
        echo "   - SSL/TLS問題の対応済み"'
      - '.github/workflows/**'

permissions:
  contents: write
  
jobs:
  release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Publish
      run: dotnet publish --configuration Release --output ./publish --self-contained true --runtime win-x64 --verbosity normal
      
    - name: Get version from csproj
      id: get_version
      run: |
        $csproj = Get-Content TaskCrony.csproj
        $version = ($csproj | Select-String -Pattern '<Version>(.*)</Version>').Matches[0].Groups[1].Value
        if ([string]::IsNullOrEmpty($version)) {
          $version = ($csproj | Select-String -Pattern '<AssemblyVersion>(.*)</AssemblyVersion>').Matches[0].Groups[1].Value
        }
        if ([string]::IsNullOrEmpty($version)) {
          $version = "1.3.0"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "検出されたバージョン: $version"
      shell: pwsh
      
    - name: Organize and Create ZIP package
      run: |
        # === リリースフォルダを作成（DLL整理なし） ===
        $releaseDir = "TaskCrony_Release"
        if (Test-Path $releaseDir) { Remove-Item $releaseDir -Recurse -Force }
        New-Item -ItemType Directory -Path $releaseDir
        New-Item -ItemType Directory -Path "$releaseDir\docs"
        
        cd publish
        
        # publishフォルダの全内容をそのままコピー（整理なし）
        Write-Host "publishフォルダの全内容をコピー中..."
        Copy-Item * "../$releaseDir/" -Recurse -Force
        
        # 言語フォルダもそのままコピー
        Get-ChildItem -Directory | ForEach-Object {
            Copy-Item $_.FullName "../$releaseDir/" -Recurse -Force
            Write-Host "言語フォルダコピー: $($_.Name)"
        }
        
        cd ..
        
        # READMEとセットアップガイドをdocsフォルダにコピー
        if (Test-Path "README.md") { Copy-Item "README.md" "$releaseDir/docs/" -Force }
        if (Test-Path "LICENSE.txt") { Copy-Item "LICENSE.txt" "$releaseDir/docs/" -Force }
        
        # 使用方法テキストファイルを作成（実測値ベース）
        @"
        ■ TaskCrony v${{ steps.get_version.outputs.VERSION }} 使用方法

        【起動方法】
        TaskCrony.exe をダブルクリックしてください

        【フォルダ構成】（DLL整理なし・確実起動版）
        ├── TaskCrony.exe                   - メインアプリケーション
        ├── TaskCrony.deps.json            - アプリケーション依存関係設定
        ├── TaskCrony.runtimeconfig.json   - ランタイム設定
        ├── Microsoft.Win32.TaskScheduler.dll - タスクスケジューラーライブラリ
        ├── System.*.dll                   - .NETシステムライブラリ（全て）
        ├── Microsoft.*.dll                 - Microsoftライブラリ（全て）
        ├── その他.dll                      - 全ての依存DLLファイル
        ├── 言語フォルダ/                   - 多言語リソース
        ├── docs/                          - ドキュメント類
        └── BAT/                           - 生成されるBATファイル保存先（自動作成）

        【特徴】
        - 自己完結型（.NETランタイム不要）
        - 全ファイルをルートに配置で確実起動
        - DLL整理なしで依存関係エラーを回避
        - ローカルビルドと同じ構成
        - ファイルサイズ: 約146MB（全ランタイム込み）

        【重要な注意事項】
        - TaskCrony.exe と同じフォルダの全ファイルが必要です
        - ファイルは移動・削除しないでください（全て必要）
        - 初回起動時にBATフォルダが自動作成されます
        - SSL/TLS証明書エラーが出る場合は、システム時刻を確認してください

        【システム要件】
        - Windows 10/11 (x64)
        - 管理者権限（タスクスケジューラー操作時）
        - 約200MB のディスク容量
        - インターネット接続（バージョンチェック機能、オプション）

        【トラブルシューティング】
        - アプリが起動しない → Logs/フォルダのログファイルを確認
        - SSL接続エラー → ネットワーク設定またはファイアウォールを確認
        - ファイルが見つからない → 全ファイルが同じフォルダにあることを確認

        【新機能（v${{ steps.get_version.outputs.VERSION }}）】
        - ログ機能とリアルタイムログビューアー
        - GitHub API統合による自動バージョンチェック
        - 包括的なエラーハンドリングとロギング
        - 確実起動を優先したパッケージ構成

        【サポート】
        - GitHub: https://github.com/yamaken999/TaskCrony
        - 問題報告: GitHubのIssuesページをご利用ください
        - ドキュメント: docs/README.md を参照
        "@ | Out-File -FilePath "$releaseDir/使用方法.txt" -Encoding utf8
        
        # ZIPファイルを作成
        Compress-Archive -Path $releaseDir -DestinationPath "TaskCrony_v${{ steps.get_version.outputs.VERSION }}_Release.zip" -Force
        
        # パッケージ内容の確認
        $rootFiles = Get-ChildItem $releaseDir -File | Measure-Object | Select-Object -ExpandProperty Count
        $libsFiles = Get-ChildItem "$releaseDir/libs" -File | Measure-Object | Select-Object -ExpandProperty Count
        
        echo "📦 整理されたパッケージ作成完了:"
        echo "   TaskCrony_v${{ steps.get_version.outputs.VERSION }}_Release.zip"
        echo ""
        echo "✅ フォルダ構成 (ローカル検証済み):"
        echo "   📱 ルートファイル: $rootFiles 個 (TaskCrony.exe + 重要DLL)"
        echo "   📁 libs/ファイル: $libsFiles 個 (.NETランタイム)"
        echo "   📁 docs/ (ドキュメント)"
        echo "   📁 使用方法.txt (詳細説明)"
        echo ""
        echo "� 技術詳細:"
        echo "   - .NET 8.0 自己完結型配布"
        echo "   - libsフォルダ自動プロービング設定済み"
        echo "   - SSL/TLS問題の対応済み"
      shell: pwsh
      
    - name: Generate release notes
      id: release_notes
      run: |
        $releaseNotes = @"
        ## TaskCrony v${{ steps.get_version.outputs.VERSION }}
        
        ### 🚀 新機能・改善
        - ログ機能とバージョンチェック機能追加
        - 包括的なログ記録システム（7日間保持）
        - GitHub API統合による自動バージョンチェック
        - リアルタイムログビューアー
        - Windows タスクスケジューラー統合
        - 日付ベースのファイル・フォルダ自動作成
        - BATファイル自動生成とエンコーディング最適化
        - 複数ファイル対応とリアルタイムプレビュー
        
        ### 📦 配布ファイル（整理済み）
        - **TaskCrony.exe**: メインアプリケーション
        - **libs/**: 実行に必要なライブラリファイル
        - **docs/**: README.md、ライセンス等
        - **使用方法.txt**: 詳細な使用手順
        
        ### 🔧 技術仕様
        - 対象: Windows 10/11 (.NET 8.0)
        - PowerShell連携による日付計算
        - UTF-8エンコーディング（BOM問題対応済み）
        - JSON設定ファイル管理
        
        ### 📝 使用方法
        1. ZIPファイルをダウンロード・展開
        2. TaskCrony.exeを実行
        3. タスク設定を入力して作成
        4. Windows タスクスケジューラーで自動実行
        
        ビルド日時: $(Get-Date -Format "yyyy年MM月dd日 HH:mm") JST
        "@
        
        # GitHub用にエスケープ
        $releaseNotes = $releaseNotes -replace "`r`n", "`n"
        echo "RELEASE_NOTES<<EOF" >> $env:GITHUB_OUTPUT
        echo $releaseNotes >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT
      shell: pwsh
      
    - name: Delete existing release if exists
      run: |
        # 既存のリリースを削除（エラーを無視）
        gh release delete "v${{ steps.get_version.outputs.VERSION }}" --yes 2>$null || echo "No existing release to delete"
        
        # 既存のタグを削除（エラーを無視）
        git tag -d "v${{ steps.get_version.outputs.VERSION }}" 2>$null || echo "No existing local tag to delete"
        git push origin --delete "v${{ steps.get_version.outputs.VERSION }}" 2>$null || echo "No existing remote tag to delete"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      
    - name: Create Release
      run: |
        gh release create "v${{ steps.get_version.outputs.VERSION }}" `
          --title "TaskCrony v${{ steps.get_version.outputs.VERSION }}" `
          --notes '${{ steps.release_notes.outputs.RELEASE_NOTES }}' `
          "./TaskCrony_v${{ steps.get_version.outputs.VERSION }}_Release.zip#TaskCrony_v${{ steps.get_version.outputs.VERSION }}_Release.zip"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh